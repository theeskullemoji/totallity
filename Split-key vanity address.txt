Split-key vanity address
A split-key vanity address is a type of vanity address generated from one or more ECDSA private keys. The general use case is when a user generates a key-pair and only shares his public key. Everybody can use this public key to find the complementary public key leading to a vanity address. The user can than merge his private key with the complementary private key, leading to the private key of the vanity address. The security of such solution is guaranteed by the properties of the Elliptic Curve Cryptography [1].


Contents
1	Address generation
2	Address merging
3	Address generation outsourcing
4	Address generation fees
5	See also
Address generation
A split-key vanity address is generated by a specialized software, called a generator. One such sample generator is available as a part of the Vanitygen program suite. Bitaddress can be used for this purpose as well as explained in this video

Address merging
In order to create a usable vanity address, one needs to merge two or more private keys. This can be done with specialized software, such as the GoBit Testing Suite[2]. Another option is using the Vanity Wallet tool of Bitaddress, but bitaddress only supports legacy addresses, whereas the keymerging tool of Bitcoin-Uni supports P2SH & Bech32 native Segwit as well. An offline keymerging tool called VanityAddressMerger is available from Github VanityAddressMerger, this tool supports all mainnet address types. It is recommended to use these tools offline in an incognito browser, while merging partial keys, to get the final private key secure.

Address generation outsourcing
Generating a split-key vanity address can be outsourced to a third party miner without risking your final private key being compromised. Moreover, work on such address generation can be distributed to many miners simultaneously through a use of a pooling service. One example of such a service is Vanity Pool[3].

Other options for outsourcing vanity address generation include Bitcoin-Uni, Coin Dance Vanity and Vante. These services generate keys on an on-demand basis.

Address generation fees
For outsourcing the finding of vanity addresses, users got to pay fees for the Hardware and ernergy consumtion. The pricing of the services are verry different. Some of them do not update the Bitcoin prices.

See also
Vanitygen - a software suite offering an Open-CL split-key vanity address generator
Reddit post - Discussion on split-key address generation
This page is a stub. Help by expanding it.

Split-key Vanity Address Generation
This tool supports split-key vanity address generation.

Step 1, Alice generates a key pair on her computer:

$ ./keyconv -G
Pubkey (hex): 044a9fef408ec4db7e264c8f1bfc712a9f6089025bd1980660f7f72c731b7d4c6a6fa5e0fe2174aaa02fffb6ed4a5735fc3109bae2fefe060d8a09bdb8f819f38b
Privkey (hex): B6761A9A575C3C125F24B09A7ADB5F3613BB654F73ADB7097657D737FCD1C310
Address: 1AF518xd1zBNCQh2q1qsneaxAs5nPyXzNf
Privkey: 5KCeK2bzDq2YzUMfwUrNp79mEsk2eeY1dzYtCTTxEgbbFav8RtA
Then, Alice send the generated public key and the wanted prefix (for example 1ALice) to Bob. Nevertheless, Alice has to keep safely the private key and not expose it.

Step 2, Bob runs vanitygen++ (or oclvanitygen++) using the Alice's public key and the wanted prefix (1ALice).

$ ./vanitygen++ -P 044a9fef408ec4db7e264c8f1bfc712a9f6089025bd1980660f7f72c731b7d4c6a6fa5e0fe2174aaa02fffb6ed4a5735fc3109bae2fefe060d8a09bdb8f819f38b 1ALice
Difficulty: 259627881
Pattern: 1ALice
Address: 1ALicexPg59dVvYgtAP8QCphdrFep6nRwy
PrivkeyPart: 5KAuZAyz71TFwgDpiBPyMJX6YFxKyJEJDsr2tNr8uraw6JLBMpQ
Bob sends back the generated PrivkeyPart to Alice. The partial private key does not allow anyone to guess the final Alice's private key.

Step 3, Alice reconstructs the final private key using her private key (the one generated in step 1) and the PrivkeyPart from Bob:

$ ./keyconv -c 5KAuZAyz71TFwgDpiBPyMJX6YFxKyJEJDsr2tNr8uraw6JLBMpQ 5KCeK2bzDq2YzUMfwUrNp79mEsk2eeY1dzYtCTTxEgbbFav8RtA
Address: 1ALicexPg59dVvYgtAP8QCphdrFep6nRwy
Privkey: 5JcX7HgrPxEbYKcWhtBT83L3BHcdJ8K8p8X1sNHmcJLsSyMNycZ
How Split-key Works